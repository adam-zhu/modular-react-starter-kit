{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { createRootSaga, getSagaTriggers } from \"Lib/modules\";\nimport { getExampleData } from \"./services\";\nimport { createActionTypes } from \"./reducer\";\n\nconst fetchExampleData = MODULE_KEY => function* ({\n  type,\n  payload\n}) {\n  const actionTypes = createActionTypes(MODULE_KEY);\n\n  try {\n    const exampleData = yield call(getExampleData);\n    yield put({\n      type: actionTypes.SET_EXAMPLE_DATA,\n      payload: exampleData\n    });\n  } catch (e) {\n    yield put({\n      type: actionTypes.SET_EXAMPLE_DATA,\n      payload: null\n    });\n  }\n};\n\nconst getSagaAttachments = MODULE_KEY => ({\n  fetchExampleData: {\n    take: takeEvery,\n    trigger: `${MODULE_KEY}/ExampleModule/TRIGGER_fetchExampleData`,\n    saga: fetchExampleData(MODULE_KEY)\n  }\n});\n\nconst initModuleSagas = MODULE_KEY => {\n  const sagaAttachments = getSagaAttachments(MODULE_KEY);\n  return {\n    rootSaga: createRootSaga(sagaAttachments),\n    triggers: getSagaTriggers(sagaAttachments)\n  };\n};\n\nexport default initModuleSagas;","map":{"version":3,"sources":["/Users/adamzhu/Projects/architecture-sandbox/src/Shared/Modules/ExampleModule/sagas.js"],"names":["call","put","takeEvery","createRootSaga","getSagaTriggers","getExampleData","createActionTypes","fetchExampleData","MODULE_KEY","type","payload","actionTypes","exampleData","SET_EXAMPLE_DATA","e","getSagaAttachments","take","trigger","saga","initModuleSagas","sagaAttachments","rootSaga","triggers"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,aAAhD;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,iBAAT,QAAkC,WAAlC;;AAEA,MAAMC,gBAAgB,GAAGC,UAAU,IACjC,WAAU;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAV,EAA6B;AAC3B,QAAMC,WAAW,GAAGL,iBAAiB,CAACE,UAAD,CAArC;;AAEA,MAAI;AACF,UAAMI,WAAW,GAAG,MAAMZ,IAAI,CAACK,cAAD,CAA9B;AAEA,UAAMJ,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEE,WAAW,CAACE,gBADV;AAERH,MAAAA,OAAO,EAAEE;AAFD,KAAD,CAAT;AAID,GAPD,CAOE,OAAOE,CAAP,EAAU;AACV,UAAMb,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEE,WAAW,CAACE,gBADV;AAERH,MAAAA,OAAO,EAAE;AAFD,KAAD,CAAT;AAID;AACF,CAjBH;;AAmBA,MAAMK,kBAAkB,GAAGP,UAAU,KAAK;AACxCD,EAAAA,gBAAgB,EAAE;AAChBS,IAAAA,IAAI,EAAEd,SADU;AAEhBe,IAAAA,OAAO,EAAG,GAAET,UAAW,yCAFP;AAGhBU,IAAAA,IAAI,EAAEX,gBAAgB,CAACC,UAAD;AAHN;AADsB,CAAL,CAArC;;AAQA,MAAMW,eAAe,GAAGX,UAAU,IAAI;AACpC,QAAMY,eAAe,GAAGL,kBAAkB,CAACP,UAAD,CAA1C;AAEA,SAAO;AACLa,IAAAA,QAAQ,EAAElB,cAAc,CAACiB,eAAD,CADnB;AAELE,IAAAA,QAAQ,EAAElB,eAAe,CAACgB,eAAD;AAFpB,GAAP;AAID,CAPD;;AASA,eAAeD,eAAf","sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { createRootSaga, getSagaTriggers } from \"Lib/modules\";\nimport { getExampleData } from \"./services\";\nimport { createActionTypes } from \"./reducer\";\n\nconst fetchExampleData = MODULE_KEY =>\n  function*({ type, payload }) {\n    const actionTypes = createActionTypes(MODULE_KEY);\n\n    try {\n      const exampleData = yield call(getExampleData);\n\n      yield put({\n        type: actionTypes.SET_EXAMPLE_DATA,\n        payload: exampleData\n      });\n    } catch (e) {\n      yield put({\n        type: actionTypes.SET_EXAMPLE_DATA,\n        payload: null\n      });\n    }\n  };\n\nconst getSagaAttachments = MODULE_KEY => ({\n  fetchExampleData: {\n    take: takeEvery,\n    trigger: `${MODULE_KEY}/ExampleModule/TRIGGER_fetchExampleData`,\n    saga: fetchExampleData(MODULE_KEY)\n  }\n});\n\nconst initModuleSagas = MODULE_KEY => {\n  const sagaAttachments = getSagaAttachments(MODULE_KEY);\n\n  return {\n    rootSaga: createRootSaga(sagaAttachments),\n    triggers: getSagaTriggers(sagaAttachments)\n  };\n};\n\nexport default initModuleSagas;\n"]},"metadata":{},"sourceType":"module"}