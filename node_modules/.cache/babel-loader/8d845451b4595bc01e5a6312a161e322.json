{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar SagaComparer_1 = require(\"./SagaComparer\");\n\nvar redux_dynamic_modules_core_1 = require(\"redux-dynamic-modules-core\");\n/**\n * Creates saga items which can be used to start and stop sagas dynamically\n */\n\n\nfunction getSagaManager(sagaMiddleware) {\n  var tasks = redux_dynamic_modules_core_1.getMap(SagaComparer_1.sagaEquals);\n  return {\n    getItems: function () {\n      return tasks.keys.slice();\n    },\n    add: function (sagas) {\n      if (!sagas) {\n        return;\n      }\n\n      sagas.forEach(function (saga) {\n        if (saga && !tasks.get(saga)) {\n          tasks.add(saga, runSaga(sagaMiddleware, saga));\n        }\n      });\n    },\n    remove: function (sagas) {\n      if (!sagas) {\n        return;\n      }\n\n      sagas.forEach(function (saga) {\n        if (tasks.get(saga)) {\n          var task = tasks.remove(saga);\n          task.cancel();\n        }\n      });\n    },\n    dispose: function () {\n      // Cancel everything\n      tasks.keys.forEach(function (k) {\n        return tasks.get(k).cancel();\n      });\n    }\n  };\n}\n\nexports.getSagaManager = getSagaManager;\n\nfunction runSaga(sagaMiddleware, sagaRegistration) {\n  if (typeof sagaRegistration === \"function\") {\n    var saga_1 = sagaRegistration;\n    return sagaMiddleware.run(saga_1);\n  }\n\n  var saga = sagaRegistration.saga;\n  var argument = sagaRegistration.argument;\n  return sagaMiddleware.run(saga, argument);\n}","map":{"version":3,"sources":["/Users/adamzhu/Projects/architecture-sandbox/node_modules/redux-dynamic-modules-saga/lib/SagaManager.js"],"names":["exports","__esModule","SagaComparer_1","require","redux_dynamic_modules_core_1","getSagaManager","sagaMiddleware","tasks","getMap","sagaEquals","getItems","keys","slice","add","sagas","forEach","saga","get","runSaga","remove","task","cancel","dispose","k","sagaRegistration","saga_1","run","argument"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AACA,IAAIC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,IAAIC,4BAA4B,GAAGD,OAAO,CAAC,4BAAD,CAA1C;AACA;;;;;AAGA,SAASE,cAAT,CAAwBC,cAAxB,EAAwC;AACpC,MAAIC,KAAK,GAAGH,4BAA4B,CAACI,MAA7B,CAAoCN,cAAc,CAACO,UAAnD,CAAZ;AACA,SAAO;AACHC,IAAAA,QAAQ,EAAE,YAAY;AAAE,aAAOH,KAAK,CAACI,IAAN,CAAWC,KAAX,EAAP;AAA4B,KADjD;AAEHC,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AAClB,UAAI,CAACA,KAAL,EAAY;AACR;AACH;;AACDA,MAAAA,KAAK,CAACC,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC1B,YAAIA,IAAI,IAAI,CAACT,KAAK,CAACU,GAAN,CAAUD,IAAV,CAAb,EAA8B;AAC1BT,UAAAA,KAAK,CAACM,GAAN,CAAUG,IAAV,EAAgBE,OAAO,CAACZ,cAAD,EAAiBU,IAAjB,CAAvB;AACH;AACJ,OAJD;AAKH,KAXE;AAYHG,IAAAA,MAAM,EAAE,UAAUL,KAAV,EAAiB;AACrB,UAAI,CAACA,KAAL,EAAY;AACR;AACH;;AACDA,MAAAA,KAAK,CAACC,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC1B,YAAIT,KAAK,CAACU,GAAN,CAAUD,IAAV,CAAJ,EAAqB;AACjB,cAAII,IAAI,GAAGb,KAAK,CAACY,MAAN,CAAaH,IAAb,CAAX;AACAI,UAAAA,IAAI,CAACC,MAAL;AACH;AACJ,OALD;AAMH,KAtBE;AAuBHC,IAAAA,OAAO,EAAE,YAAY;AACjB;AACAf,MAAAA,KAAK,CAACI,IAAN,CAAWI,OAAX,CAAmB,UAAUQ,CAAV,EAAa;AAAE,eAAOhB,KAAK,CAACU,GAAN,CAAUM,CAAV,EAAaF,MAAb,EAAP;AAA+B,OAAjE;AACH;AA1BE,GAAP;AA4BH;;AACDrB,OAAO,CAACK,cAAR,GAAyBA,cAAzB;;AACA,SAASa,OAAT,CAAiBZ,cAAjB,EAAiCkB,gBAAjC,EAAmD;AAC/C,MAAI,OAAOA,gBAAP,KAA4B,UAAhC,EAA4C;AACxC,QAAIC,MAAM,GAAGD,gBAAb;AACA,WAAOlB,cAAc,CAACoB,GAAf,CAAmBD,MAAnB,CAAP;AACH;;AACD,MAAIT,IAAI,GAAGQ,gBAAgB,CAACR,IAA5B;AACA,MAAIW,QAAQ,GAAGH,gBAAgB,CAACG,QAAhC;AACA,SAAOrB,cAAc,CAACoB,GAAf,CAAmBV,IAAnB,EAAyBW,QAAzB,CAAP;AACH","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar SagaComparer_1 = require(\"./SagaComparer\");\nvar redux_dynamic_modules_core_1 = require(\"redux-dynamic-modules-core\");\n/**\n * Creates saga items which can be used to start and stop sagas dynamically\n */\nfunction getSagaManager(sagaMiddleware) {\n    var tasks = redux_dynamic_modules_core_1.getMap(SagaComparer_1.sagaEquals);\n    return {\n        getItems: function () { return tasks.keys.slice(); },\n        add: function (sagas) {\n            if (!sagas) {\n                return;\n            }\n            sagas.forEach(function (saga) {\n                if (saga && !tasks.get(saga)) {\n                    tasks.add(saga, runSaga(sagaMiddleware, saga));\n                }\n            });\n        },\n        remove: function (sagas) {\n            if (!sagas) {\n                return;\n            }\n            sagas.forEach(function (saga) {\n                if (tasks.get(saga)) {\n                    var task = tasks.remove(saga);\n                    task.cancel();\n                }\n            });\n        },\n        dispose: function () {\n            // Cancel everything\n            tasks.keys.forEach(function (k) { return tasks.get(k).cancel(); });\n        }\n    };\n}\nexports.getSagaManager = getSagaManager;\nfunction runSaga(sagaMiddleware, sagaRegistration) {\n    if (typeof sagaRegistration === \"function\") {\n        var saga_1 = sagaRegistration;\n        return sagaMiddleware.run(saga_1);\n    }\n    var saga = sagaRegistration.saga;\n    var argument = sagaRegistration.argument;\n    return sagaMiddleware.run(saga, argument);\n}\n"]},"metadata":{},"sourceType":"script"}