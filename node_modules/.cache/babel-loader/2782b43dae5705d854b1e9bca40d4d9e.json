{"ast":null,"code":"export const mockService = (mockData, latencyMs) => {\n  const networkLatency = latencyMs || Math.random() * 1000;\n  return new Promise((resolve, reject) => setTimeout(() => Math.random() < 0.05 ? reject(\"Mock error message\") : resolve(mockData), networkLatency));\n};","map":{"version":3,"sources":["/Users/adamzhu/Projects/architecture-sandbox/src/Lib/utils.js"],"names":["mockService","mockData","latencyMs","networkLatency","Math","random","Promise","resolve","reject","setTimeout"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAClD,QAAMC,cAAc,GAAGD,SAAS,IAAIE,IAAI,CAACC,MAAL,KAAgB,IAApD;AAEA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACjBC,UAAU,CACR,MACEL,IAAI,CAACC,MAAL,KAAgB,IAAhB,GAAuBG,MAAM,CAAC,oBAAD,CAA7B,GAAsDD,OAAO,CAACN,QAAD,CAFvD,EAGRE,cAHQ,CADL,CAAP;AAOD,CAVM","sourcesContent":["export const mockService = (mockData, latencyMs) => {\n  const networkLatency = latencyMs || Math.random() * 1000;\n\n  return new Promise((resolve, reject) =>\n    setTimeout(\n      () =>\n        Math.random() < 0.05 ? reject(\"Mock error message\") : resolve(mockData),\n      networkLatency\n    )\n  );\n};\n"]},"metadata":{},"sourceType":"module"}