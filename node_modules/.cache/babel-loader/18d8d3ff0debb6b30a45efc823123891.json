{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar redux_saga_1 = require(\"redux-saga\");\n\nvar redux_dynamic_modules_core_1 = require(\"redux-dynamic-modules-core\");\n\nvar SagaManager_1 = require(\"./SagaManager\");\n\nvar SagaComparer_1 = require(\"./SagaComparer\");\n/**\n * Get an extension that integrates saga with the store\n * @param sagaContext The context to provide to the saga\n */\n\n\nfunction getSagaExtension(sagaContext, onError) {\n  var sagaMonitor = undefined; //@ts-ignore\n\n  if (process.env.NODE_ENV === \"development\" && typeof window !== \"undefined\") {\n    sagaMonitor = window[\"__SAGA_MONITOR_EXTENSION__\"] || undefined;\n  } // Setup the saga middleware\n\n\n  var sagaMiddleware = redux_saga_1[\"default\"]({\n    context: sagaContext,\n    sagaMonitor: sagaMonitor,\n    onError: onError\n  });\n\n  var _sagaManager = redux_dynamic_modules_core_1.getRefCountedManager(SagaManager_1.getSagaManager(sagaMiddleware), SagaComparer_1.sagaEquals);\n\n  return {\n    middleware: [sagaMiddleware],\n    onModuleManagerCreated: function (moduleManager) {\n      if (sagaContext) {\n        sagaContext[\"moduleManager\"] = moduleManager;\n      }\n    },\n    onModuleAdded: function (module) {\n      if (module.sagas) {\n        _sagaManager.add(module.sagas);\n      }\n    },\n    onModuleRemoved: function (module) {\n      if (module.sagas) {\n        _sagaManager.remove(module.sagas);\n      }\n    },\n    dispose: function () {\n      _sagaManager.dispose();\n    }\n  };\n}\n\nexports.getSagaExtension = getSagaExtension;","map":{"version":3,"sources":["/Users/adamzhu/Projects/architecture-sandbox/node_modules/redux-dynamic-modules-saga/lib/SagaExtension.js"],"names":["exports","__esModule","redux_saga_1","require","redux_dynamic_modules_core_1","SagaManager_1","SagaComparer_1","getSagaExtension","sagaContext","onError","sagaMonitor","undefined","process","env","NODE_ENV","window","sagaMiddleware","context","_sagaManager","getRefCountedManager","getSagaManager","sagaEquals","middleware","onModuleManagerCreated","moduleManager","onModuleAdded","module","sagas","add","onModuleRemoved","remove","dispose"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AACA,IAAIC,YAAY,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAIC,4BAA4B,GAAGD,OAAO,CAAC,4BAAD,CAA1C;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAIG,cAAc,GAAGH,OAAO,CAAC,gBAAD,CAA5B;AACA;;;;;;AAIA,SAASI,gBAAT,CAA0BC,WAA1B,EAAuCC,OAAvC,EAAgD;AAC5C,MAAIC,WAAW,GAAGC,SAAlB,CAD4C,CAE5C;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0C,OAAOC,MAAP,KAAkB,WAAhE,EAA6E;AACzEL,IAAAA,WAAW,GAAGK,MAAM,CAAC,4BAAD,CAAN,IAAwCJ,SAAtD;AACH,GAL2C,CAM5C;;;AACA,MAAIK,cAAc,GAAGd,YAAY,CAAC,SAAD,CAAZ,CAAwB;AACzCe,IAAAA,OAAO,EAAET,WADgC;AAEzCE,IAAAA,WAAW,EAAEA,WAF4B;AAGzCD,IAAAA,OAAO,EAAEA;AAHgC,GAAxB,CAArB;;AAKA,MAAIS,YAAY,GAAGd,4BAA4B,CAACe,oBAA7B,CAAkDd,aAAa,CAACe,cAAd,CAA6BJ,cAA7B,CAAlD,EAAgGV,cAAc,CAACe,UAA/G,CAAnB;;AACA,SAAO;AACHC,IAAAA,UAAU,EAAE,CAACN,cAAD,CADT;AAEHO,IAAAA,sBAAsB,EAAE,UAAUC,aAAV,EAAyB;AAC7C,UAAIhB,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAAC,eAAD,CAAX,GAA+BgB,aAA/B;AACH;AACJ,KANE;AAOHC,IAAAA,aAAa,EAAE,UAAUC,MAAV,EAAkB;AAC7B,UAAIA,MAAM,CAACC,KAAX,EAAkB;AACdT,QAAAA,YAAY,CAACU,GAAb,CAAiBF,MAAM,CAACC,KAAxB;AACH;AACJ,KAXE;AAYHE,IAAAA,eAAe,EAAE,UAAUH,MAAV,EAAkB;AAC/B,UAAIA,MAAM,CAACC,KAAX,EAAkB;AACdT,QAAAA,YAAY,CAACY,MAAb,CAAoBJ,MAAM,CAACC,KAA3B;AACH;AACJ,KAhBE;AAiBHI,IAAAA,OAAO,EAAE,YAAY;AACjBb,MAAAA,YAAY,CAACa,OAAb;AACH;AAnBE,GAAP;AAqBH;;AACD/B,OAAO,CAACO,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar redux_saga_1 = require(\"redux-saga\");\nvar redux_dynamic_modules_core_1 = require(\"redux-dynamic-modules-core\");\nvar SagaManager_1 = require(\"./SagaManager\");\nvar SagaComparer_1 = require(\"./SagaComparer\");\n/**\n * Get an extension that integrates saga with the store\n * @param sagaContext The context to provide to the saga\n */\nfunction getSagaExtension(sagaContext, onError) {\n    var sagaMonitor = undefined;\n    //@ts-ignore\n    if (process.env.NODE_ENV === \"development\" && typeof window !== \"undefined\") {\n        sagaMonitor = window[\"__SAGA_MONITOR_EXTENSION__\"] || undefined;\n    }\n    // Setup the saga middleware\n    var sagaMiddleware = redux_saga_1[\"default\"]({\n        context: sagaContext,\n        sagaMonitor: sagaMonitor,\n        onError: onError\n    });\n    var _sagaManager = redux_dynamic_modules_core_1.getRefCountedManager(SagaManager_1.getSagaManager(sagaMiddleware), SagaComparer_1.sagaEquals);\n    return {\n        middleware: [sagaMiddleware],\n        onModuleManagerCreated: function (moduleManager) {\n            if (sagaContext) {\n                sagaContext[\"moduleManager\"] = moduleManager;\n            }\n        },\n        onModuleAdded: function (module) {\n            if (module.sagas) {\n                _sagaManager.add(module.sagas);\n            }\n        },\n        onModuleRemoved: function (module) {\n            if (module.sagas) {\n                _sagaManager.remove(module.sagas);\n            }\n        },\n        dispose: function () {\n            _sagaManager.dispose();\n        }\n    };\n}\nexports.getSagaExtension = getSagaExtension;\n"]},"metadata":{},"sourceType":"script"}